Metadata-Version: 2.1
Name: pyexcel
Version: 0.7.0
Summary: A wrapper library that provides one API to read, manipulate and writedata in different excel formats
Home-page: https://github.com/pyexcel/pyexcel
Author: C.W.
Author-email: info@pyexcel.org
License: New BSD
Download-URL: https://github.com/pyexcel/pyexcel/archive/0.7.0.tar.gz
Keywords: python,tsv,tsvzcsv,csvz,xls,xlsx,ods
Platform: UNKNOWN
Classifier: Topic :: Software Development :: Libraries
Classifier: Programming Language :: Python
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Development Status :: 3 - Alpha
Requires-Python: >=3.6
License-File: LICENSE
Requires-Dist: chardet
Requires-Dist: lml (>=0.0.4)
Requires-Dist: pyexcel-io (>=0.6.2)
Requires-Dist: texttable (>=0.8.2)
Provides-Extra: ods
Requires-Dist: pyexcel-ods3 (>=0.6.0) ; extra == 'ods'
Provides-Extra: xls
Requires-Dist: pyexcel-xls (>=0.6.0) ; extra == 'xls'
Provides-Extra: xlsx
Requires-Dist: pyexcel-xlsx (>=0.6.0) ; extra == 'xlsx'

================================================================================
pyexcel - Let you focus on data, instead of file formats
================================================================================

.. image:: https://raw.githubusercontent.com/pyexcel/pyexcel.github.io/master/images/patreon.png
   :target: https://www.patreon.com/chfw

.. image:: https://raw.githubusercontent.com/pyexcel/pyexcel-mobans/master/images/awesome-badge.svg
   :target: https://awesome-python.com/#specific-formats-processing

.. image:: https://github.com/pyexcel/pyexcel/workflows/run_tests/badge.svg
   :target: http://github.com/pyexcel/pyexcel/actions

.. image:: https://codecov.io/gh/pyexcel/pyexcel/branch/master/graph/badge.svg
   :target: https://codecov.io/gh/pyexcel/pyexcel

.. image:: https://badge.fury.io/py/pyexcel.svg
   :target: https://pypi.org/project/pyexcel

.. image:: https://anaconda.org/conda-forge/pyexcel/badges/version.svg
   :target: https://anaconda.org/conda-forge/pyexcel

.. image:: https://pepy.tech/badge/pyexcel/month
   :target: https://pepy.tech/project/pyexcel

.. image:: https://anaconda.org/conda-forge/pyexcel/badges/downloads.svg
   :target: https://anaconda.org/conda-forge/pyexcel

.. image:: https://img.shields.io/gitter/room/gitterHQ/gitter.svg
   :target: https://gitter.im/pyexcel/Lobby

.. image:: https://img.shields.io/static/v1?label=continuous%20templating&message=%E6%A8%A1%E7%89%88%E6%9B%B4%E6%96%B0&color=blue&style=flat-square
    :target: https://moban.readthedocs.io/en/latest/#at-scale-continous-templating-for-open-source-projects

.. image:: https://img.shields.io/static/v1?label=coding%20style&message=black&color=black&style=flat-square
    :target: https://github.com/psf/black
.. image:: https://readthedocs.org/projects/pyexcel/badge/?version=latest
   :target: http://pyexcel.readthedocs.org/en/latest/

Support the project
================================================================================

If your company has embedded pyexcel and its components into a revenue generating
product, please support me on github, `patreon <https://www.patreon.com/bePatron?u=5537627>`_
or `bounty source <https://salt.bountysource.com/teams/chfw-pyexcel>`_ to maintain
the project and develop it further.

If you are an individual, you are welcome to support me too and for however long
you feel like. As my backer, you will receive
`early access to pyexcel related contents <https://www.patreon.com/pyexcel/posts>`_.

And your issues will get prioritized if you would like to become my patreon as `pyexcel pro user`.

With your financial support, I will be able to invest
a little bit more time in coding, documentation and writing interesting posts.


Known constraints
==================

Fonts, colors and charts are not supported.

Nor to read password protected xls, xlsx and ods files.

Introduction
================================================================================

Feature Highlights
===================

.. table:: A list of supported file formats

    ============ =======================================================
    file format  definition
    ============ =======================================================
    csv          comma separated values
    tsv          tab separated values
    csvz         a zip file that contains one or many csv files
    tsvz         a zip file that contains one or many tsv files
    xls          a spreadsheet file format created by
                 MS-Excel 97-2003 
    xlsx         MS-Excel Extensions to the Office Open XML
                 SpreadsheetML File Format.
    xlsm         an MS-Excel Macro-Enabled Workbook file
    ods          open document spreadsheet
    fods         flat open document spreadsheet
    json         java script object notation
    html         html table of the data structure
    simple       simple presentation
    rst          rStructured Text presentation of the data
    mediawiki    media wiki table
    ============ =======================================================


.. image:: https://github.com/pyexcel/pyexcel/raw/dev/docs/source/_static/images/architecture.svg


1. One application programming interface(API) to handle multiple data sources:

   * physical file
   * memory file
   * SQLAlchemy table
   * Django Model
   * Python data structures: dictionary, records and array

2. One API to read and write data in various excel file formats.
3. For large data sets, data streaming are supported. A genenerator can be returned to you. Checkout iget_records, iget_array, isave_as and isave_book_as.




Installation
================================================================================

You can install pyexcel via pip:

.. code-block:: bash

    $ pip install pyexcel


or clone it and install it:

.. code-block:: bash

    $ git clone https://github.com/pyexcel/pyexcel.git
    $ cd pyexcel
    $ python setup.py install



One liners
================================================================================

This section shows you how to get data from your excel files and how to
export data to excel files in **one line**

Read from the excel files
--------------------------------------------------------------------------------

Get a list of dictionaries
********************************************************************************


Suppose you want to process `History of Classical Music <https://www.naxos.com/education/brief_history.asp>`_:


History of Classical Music:

===============  =============  ====================================
Name             Period         Representative Composers
Medieval         c.1150-c.1400  Machaut, Landini
Renaissance      c.1400-c.1600  Gibbons, Frescobaldi
Baroque          c.1600-c.1750  JS Bach, Vivaldi
Classical        c.1750-c.1830  Joseph Haydn, Wolfgan Amadeus Mozart
Earley Romantic  c.1830-c.1860  Chopin, Mendelssohn, Schumann, Liszt
Late Romantic    c.1860-c.1920  Wagner,Verdi
===============  =============  ====================================


Let's get a list of dictionary out from the xls file:

.. code-block:: python

   >>> records = p.get_records(file_name="your_file.xls")

And let's check what do we have:

.. code-block:: python

   >>> for row in records:
   ...     print(f"{row['Representative Composers']} are from {row['Name']} period ({row['Period']})")
   Machaut, Landini are from Medieval period (c.1150-c.1400)
   Gibbons, Frescobaldi are from Renaissance period (c.1400-c.1600)
   JS Bach, Vivaldi are from Baroque period (c.1600-c.1750)
   Joseph Haydn, Wolfgan Amadeus Mozart are from Classical period (c.1750-c.1830)
   Chopin, Mendelssohn, Schumann, Liszt are from Earley Romantic period (c.1830-c.1860)
   Wagner,Verdi are from Late Romantic period (c.1860-c.1920)


Get two dimensional array
********************************************************************************

Instead, what if you have to use `pyexcel.get_array` to do the same:

.. code-block:: python

   >>> for row in p.get_array(file_name="your_file.xls", start_row=1):
   ...     print(f"{row[2]} are from {row[0]} period ({row[1]})")
   Machaut, Landini are from Medieval period (c.1150-c.1400)
   Gibbons, Frescobaldi are from Renaissance period (c.1400-c.1600)
   JS Bach, Vivaldi are from Baroque period (c.1600-c.1750)
   Joseph Haydn, Wolfgan Amadeus Mozart are from Classical period (c.1750-c.1830)
   Chopin, Mendelssohn, Schumann, Liszt are from Earley Romantic period (c.1830-c.1860)
   Wagner,Verdi are from Late Romantic period (c.1860-c.1920)


where `start_row` skips the header row.


Get a dictionary
********************************************************************************

You can get a dictionary too:

Now let's get a dictionary out from the spreadsheet:

.. code-block:: python

   >>> my_dict = p.get_dict(file_name="your_file.xls", name_columns_by_row=0)

And check what do we have:

.. code-block:: python

   >>> from pyexcel._compact import OrderedDict
   >>> isinstance(my_dict, OrderedDict)
   True
   >>> for key, values in my_dict.items():
   ...     print(key + " : " + ','.join([str(item) for item in values]))
   Name : Medieval,Renaissance,Baroque,Classical,Earley Romantic,Late Romantic
   Period : c.1150-c.1400,c.1400-c.1600,c.1600-c.1750,c.1750-c.1830,c.1830-c.1860,c.1860-c.1920
   Representative Composers : Machaut, Landini,Gibbons, Frescobaldi,JS Bach, Vivaldi,Joseph Haydn, Wolfgan Amadeus Mozart,Chopin, Mendelssohn, Schumann, Liszt,Wagner,Verdi


Please note that my_dict is an OrderedDict.

Get a dictionary of two dimensional array
********************************************************************************


Suppose you have a multiple sheet book as the following:


pyexcel:Sheet 1:

=====================  =  =
1                      2  3
4                      5  6
7                      8  9
=====================  =  =

pyexcel:Sheet 2:

=====================  =  =
X                      Y  Z
1                      2  3
4                      5  6
=====================  =  =

pyexcel:Sheet 3:

=====================  =  =
O                      P  Q
3                      2  1
4                      3  2
=====================  =  =


Here is the code to obtain those sheets as a single dictionary:

.. code-block:: python

   >>> book_dict = p.get_book_dict(file_name="book.xls")

And check:

.. code-block:: python

   >>> isinstance(book_dict, OrderedDict)
   True
   >>> import json
   >>> for key, item in book_dict.items():
   ...     print(json.dumps({key: item}))
   {"Sheet 1": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}
   {"Sheet 2": [["X", "Y", "Z"], [1, 2, 3], [4, 5, 6]]}
   {"Sheet 3": [["O", "P", "Q"], [3, 2, 1], [4, 3, 2]]}


Write data
---------------------------------------------

Export an array
**********************

Suppose you have the following array:

.. code-block:: python

   >>> data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

And here is the code to save it as an excel file :

.. code-block:: python

   >>> p.save_as(array=data, dest_file_name="example.xls")

Let's verify it:

.. code-block:: python

    >>> p.get_sheet(file_name="example.xls")
    pyexcel_sheet1:
    +---+---+---+
    | 1 | 2 | 3 |
    +---+---+---+
    | 4 | 5 | 6 |
    +---+---+---+
    | 7 | 8 | 9 |
    +---+---+---+


And here is the code to save it as a csv file :

.. code-block:: python

   >>> p.save_as(array=data,
   ...           dest_file_name="example.csv",
   ...           dest_delimiter=':')

Let's verify it:

.. code-block:: python

   >>> with open("example.csv") as f:
   ...     for line in f.readlines():
   ...         print(line.rstrip())
   ...
   1:2:3
   4:5:6
   7:8:9

Export a list of dictionaries
**********************************

.. code-block:: python

    >>> records = [
    ...     {"year": 1903, "country": "Germany", "speed": "206.7km/h"},
    ...     {"year": 1964, "country": "Japan", "speed": "210km/h"},
    ...     {"year": 2008, "country": "China", "speed": "350km/h"}
    ... ]
    >>> p.save_as(records=records, dest_file_name='high_speed_rail.xls')


Export a dictionary of single key value pair
********************************************************************************

.. code-block:: python

    >>> henley_on_thames_facts = {
    ...     "area": "5.58 square meters",
    ...     "population": "11,619",
    ...     "civial parish": "Henley-on-Thames",
    ...     "latitude": "51.536",
    ...     "longitude": "-0.898"
    ... }
    >>> p.save_as(adict=henley_on_thames_facts, dest_file_name='henley.xlsx')


Export a dictionary of single dimensonal array
********************************************************************************

.. code-block:: python

    >>> ccs_insights = {
    ...     "year": ["2017", "2018", "2019", "2020", "2021"],
    ...     "smart phones": [1.53, 1.64, 1.74, 1.82, 1.90],
    ...     "feature phones": [0.46, 0.38, 0.30, 0.23, 0.17]
    ... }
    >>> p.save_as(adict=ccs_insights, dest_file_name='ccs.csv')


Export a dictionary of two dimensional array as a book
********************************************************************************

Suppose you want to save the below dictionary to an excel file :

.. code-block:: python

   >>> a_dictionary_of_two_dimensional_arrays = {
   ...      'Sheet 1':
   ...          [
   ...              [1.0, 2.0, 3.0],
   ...              [4.0, 5.0, 6.0],
   ...              [7.0, 8.0, 9.0]
   ...          ],
   ...      'Sheet 2':
   ...          [
   ...              ['X', 'Y', 'Z'],
   ...              [1.0, 2.0, 3.0],
   ...              [4.0, 5.0, 6.0]
   ...          ],
   ...      'Sheet 3':
   ...          [
   ...              ['O', 'P', 'Q'],
   ...              [3.0, 2.0, 1.0],
   ...              [4.0, 3.0, 2.0]
   ...          ]
   ...  }

Here is the code:

.. code-block:: python

   >>> p.save_book_as(
   ...    bookdict=a_dictionary_of_two_dimensional_arrays,
   ...    dest_file_name="book.xls"
   ... )

If you want to preserve the order of sheets in your dictionary, you have to
pass on an ordered dictionary to the function itself. For example:

.. code-block:: python

   >>> data = OrderedDict()
   >>> data.update({"Sheet 2": a_dictionary_of_two_dimensional_arrays['Sheet 2']})
   >>> data.update({"Sheet 1": a_dictionary_of_two_dimensional_arrays['Sheet 1']})
   >>> data.update({"Sheet 3": a_dictionary_of_two_dimensional_arrays['Sheet 3']})
   >>> p.save_book_as(bookdict=data, dest_file_name="book.xls")

Let's verify its order:

.. code-block:: python

   >>> book_dict = p.get_book_dict(file_name="book.xls")
   >>> for key, item in book_dict.items():
   ...     print(json.dumps({key: item}))
   {"Sheet 2": [["X", "Y", "Z"], [1, 2, 3], [4, 5, 6]]}
   {"Sheet 1": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}
   {"Sheet 3": [["O", "P", "Q"], [3, 2, 1], [4, 3, 2]]}

Please notice that "Sheet 2" is the first item in the *book_dict*, meaning the order of sheets are preserved.


Transcoding
-------------------------------------------

.. note::

   Please note that `pyexcel-cli` can perform file transcoding at command line.
   No need to open your editor, save the problem, then python run.


The following code does a simple file format transcoding from xls to csv:

.. code-block:: python

   >>> p.save_as(file_name="birth.xls", dest_file_name="birth.csv")

Again it is really simple. Let's verify what we have gotten:

.. code-block:: python

   >>> sheet = p.get_sheet(file_name="birth.csv")
   >>> sheet
   birth.csv:
   +-------+--------+----------+
   | name  | weight | birth    |
   +-------+--------+----------+
   | Adam  | 3.4    | 03/02/15 |
   +-------+--------+----------+
   | Smith | 4.2    | 12/11/14 |
   +-------+--------+----------+

.. NOTE::

   Please note that csv(comma separate value) file is pure text file. Formula, charts, images and formatting in xls file will disappear no matter which transcoding tool you use. Hence, pyexcel is a quick alternative for this transcoding job.


Let use previous example and save it as xlsx instead

.. code-block:: python

   >>> p.save_as(file_name="birth.xls",
   ...           dest_file_name="birth.xlsx") # change the file extension

Again let's verify what we have gotten:

.. code-block:: python

   >>> sheet = p.get_sheet(file_name="birth.xlsx")
   >>> sheet
   pyexcel_sheet1:
   +-------+--------+----------+
   | name  | weight | birth    |
   +-------+--------+----------+
   | Adam  | 3.4    | 03/02/15 |
   +-------+--------+----------+
   | Smith | 4.2    | 12/11/14 |
   +-------+--------+----------+


Excel book merge and split operation in one line
--------------------------------------------------------------------------------

Merge all excel files in directory into  a book where each file become a sheet
********************************************************************************

The following code will merge every excel files into one file, say "output.xls":

.. code-block:: python

    from pyexcel.cookbook import merge_all_to_a_book
    import glob


    merge_all_to_a_book(glob.glob("your_csv_directory\*.csv"), "output.xls")

You can mix and match with other excel formats: xls, xlsm and ods. For example, if you are sure you have only xls, xlsm, xlsx, ods and csv files in `your_excel_file_directory`, you can do the following:

.. code-block:: python

    from pyexcel.cookbook import merge_all_to_a_book
    import glob


    merge_all_to_a_book(glob.glob("your_excel_file_directory\*.*"), "output.xls")

Split a book into single sheet files
****************************************


Suppose you have many sheets in a work book and you would like to separate each into a single sheet excel file. You can easily do this:

.. code-block:: python

   >>> from pyexcel.cookbook import split_a_book
   >>> split_a_book("megabook.xls", "output.xls")
   >>> import glob
   >>> outputfiles = glob.glob("*_output.xls")
   >>> for file in sorted(outputfiles):
   ...     print(file)
   ...
   Sheet 1_output.xls
   Sheet 2_output.xls
   Sheet 3_output.xls

for the output file, you can specify any of the supported formats


Extract just one sheet from a book
*************************************


Suppose you just want to extract one sheet from many sheets that exists in a work book and you would like to separate it into a single sheet excel file. You can easily do this:

.. code-block:: python

    >>> from pyexcel.cookbook import extract_a_sheet_from_a_book
    >>> extract_a_sheet_from_a_book("megabook.xls", "Sheet 1", "output.xls")
    >>> if os.path.exists("Sheet 1_output.xls"):
    ...     print("Sheet 1_output.xls exists")
    ...
    Sheet 1_output.xls exists

for the output file, you can specify any of the supported formats


Hidden feature: partial read
===============================================

Most pyexcel users do not know, but other library users were requesting `partial read <https://github.com/jazzband/tablib/issues/467>`_


When you are dealing with huge amount of data, e.g. 64GB, obviously you would not
like to fill up your memory with those data. What you may want to do is, record
data from Nth line, take M records and stop. And you only want to use your memory
for the M records, not for beginning part nor for the tail part.

Hence partial read feature is developed to read partial data into memory for
processing. 

You can paginate by row, by column and by both, hence you dictate what portion of the
data to read back. But remember only row limit features help you save memory. Let's
you use this feature to record data from Nth column, take M number of columns and skip
the rest. You are not going to reduce your memory footprint.

Why did not I see above benefit?
--------------------------------------------------------------------------------

This feature depends heavily on the implementation details.

`pyexcel-xls`_ (xlrd), `pyexcel-xlsx`_ (openpyxl), `pyexcel-ods`_ (odfpy) and
`pyexcel-ods3`_ (pyexcel-ezodf) will read all data into memory. Because xls,
xlsx and ods file are effective a zipped folder, all four will unzip the folder
and read the content in xml format in **full**, so as to make sense of all details.

Hence, during the partial data is been returned, the memory consumption won't
differ from reading the whole data back. Only after the partial
data is returned, the memory comsumption curve shall jump the cliff. So pagination
code here only limits the data returned to your program.

With that said, `pyexcel-xlsxr`_, `pyexcel-odsr`_ and `pyexcel-htmlr`_ DOES read
partial data into memory. Those three are implemented in such a way that they
consume the xml(html) when needed. When they have read designated portion of the
data, they stop, even if they are half way through.

In addition, pyexcel's csv readers can read partial data into memory too.


Let's assume the following file is a huge csv file:

.. code-block:: python

   >>> import datetime
   >>> import pyexcel as pe
   >>> data = [
   ...     [1, 21, 31],
   ...     [2, 22, 32],
   ...     [3, 23, 33],
   ...     [4, 24, 34],
   ...     [5, 25, 35],
   ...     [6, 26, 36]
   ... ]
   >>> pe.save_as(array=data, dest_file_name="your_file.csv")


And let's pretend to read partial data:


.. code-block:: python

   >>> pe.get_sheet(file_name="your_file.csv", start_row=2, row_limit=3)
   your_file.csv:
   +---+----+----+
   | 3 | 23 | 33 |
   +---+----+----+
   | 4 | 24 | 34 |
   +---+----+----+
   | 5 | 25 | 35 |
   +---+----+----+

And you could as well do the same for columns:

.. code-block:: python

   >>> pe.get_sheet(file_name="your_file.csv", start_column=1, column_limit=2)
   your_file.csv:
   +----+----+
   | 21 | 31 |
   +----+----+
   | 22 | 32 |
   +----+----+
   | 23 | 33 |
   +----+----+
   | 24 | 34 |
   +----+----+
   | 25 | 35 |
   +----+----+
   | 26 | 36 |
   +----+----+

Obvious, you could do both at the same time:

.. code-block:: python

   >>> pe.get_sheet(file_name="your_file.csv",
   ...     start_row=2, row_limit=3,
   ...     start_column=1, column_limit=2)
   your_file.csv:
   +----+----+
   | 23 | 33 |
   +----+----+
   | 24 | 34 |
   +----+----+
   | 25 | 35 |
   +----+----+


The pagination support is available across all pyexcel plugins.

.. note::

   No column pagination support for query sets as data source. 


Formatting while transcoding a big data file
--------------------------------------------------------------------------------

If you are transcoding a big data set, conventional formatting method would not
help unless a on-demand free RAM is available. However, there is a way to minimize
the memory footprint of pyexcel while the formatting is performed.

Let's continue from previous example. Suppose we want to transcode "your_file.csv"
to "your_file.xls" but increase each element by 1.

What we can do is to define a row renderer function as the following:

.. code-block:: python

   >>> def increment_by_one(row):
   ...     for element in row:
   ...         yield element + 1

Then pass it onto save_as function using row_renderer:

.. code-block:: python

   >>> pe.isave_as(file_name="your_file.csv",
   ...             row_renderer=increment_by_one,
   ...             dest_file_name="your_file.xlsx")


.. note::

   If the data content is from a generator, isave_as has to be used.
   
We can verify if it was done correctly:

.. code-block:: python

   >>> pe.get_sheet(file_name="your_file.xlsx")
   your_file.csv:
   +---+----+----+
   | 2 | 22 | 32 |
   +---+----+----+
   | 3 | 23 | 33 |
   +---+----+----+
   | 4 | 24 | 34 |
   +---+----+----+
   | 5 | 25 | 35 |
   +---+----+----+
   | 6 | 26 | 36 |
   +---+----+----+
   | 7 | 27 | 37 |
   +---+----+----+


Stream APIs for big file : A set of two liners
================================================================================

When you are dealing with **BIG** excel files, you will want **pyexcel** to use
constant memory.

This section shows you how to get data from your **BIG** excel files and how to
export data to excel files in **two lines** at most, without eating all
your computer memory.


Two liners for get data from big excel files
--------------------------------------------------------------------------------

Get a list of dictionaries
********************************************************************************



Suppose you want to process the following coffee data again:

Top 5 coffeine drinks:

=====================================  ===============  =============
Coffees                                Serving Size     Caffeine (mg)
Starbucks Coffee Blonde Roast          venti(20 oz)     475
Dunkin' Donuts Coffee with Turbo Shot  large(20 oz.)    398
Starbucks Coffee Pike Place Roast      grande(16 oz.)   310
Panera Coffee Light Roast              regular(16 oz.)  300
=====================================  ===============  =============


Let's get a list of dictionary out from the xls file:

.. code-block:: python

   >>> records = p.iget_records(file_name="your_file.xls")

And let's check what do we have:

.. code-block:: python

   >>> for r in records:
   ...     print(f"{r['Serving Size']} of {r['Coffees']} has {r['Caffeine (mg)']} mg")
   venti(20 oz) of Starbucks Coffee Blonde Roast has 475 mg
   large(20 oz.) of Dunkin' Donuts Coffee with Turbo Shot has 398 mg
   grande(16 oz.) of Starbucks Coffee Pike Place Roast has 310 mg
   regular(16 oz.) of Panera Coffee Light Roast has 300 mg

Please do not forgot the second line to close the opened file handle:

.. code-block:: python

   >>> p.free_resources()

Get two dimensional array
********************************************************************************

Instead, what if you have to use `pyexcel.get_array` to do the same:

.. code-block:: python

   >>> for row in p.iget_array(file_name="your_file.xls", start_row=1):
   ...     print(f"{row[1]} of {row[0]} has {row[2]} mg")
   venti(20 oz) of Starbucks Coffee Blonde Roast has 475 mg
   large(20 oz.) of Dunkin' Donuts Coffee with Turbo Shot has 398 mg
   grande(16 oz.) of Starbucks Coffee Pike Place Roast has 310 mg
   regular(16 oz.) of Panera Coffee Light Roast has 300 mg

Again, do not forgot the second line:

.. code-block:: python

   >>> p.free_resources()

where `start_row` skips the header row.

Data export in one liners
---------------------------------------------

Export an array
**********************

Suppose you have the following array:

.. code-block:: python

   >>> data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

And here is the code to save it as an excel file :

.. code-block:: python

   >>> p.isave_as(array=data, dest_file_name="example.xls")

But the following line is not required because the data source
are not file sources:

.. code-block:: python

   >>> # p.free_resources()

Let's verify it:

.. code-block:: python

    >>> p.get_sheet(file_name="example.xls")
    pyexcel_sheet1:
    +---+---+---+
    | 1 | 2 | 3 |
    +---+---+---+
    | 4 | 5 | 6 |
    +---+---+---+
    | 7 | 8 | 9 |
    +---+---+---+


And here is the code to save it as a csv file :

.. code-block:: python

   >>> p.isave_as(array=data,
   ...            dest_file_name="example.csv",
   ...            dest_delimiter=':')

Let's verify it:

.. code-block:: python

   >>> with open("example.csv") as f:
   ...     for line in f.readlines():
   ...         print(line.rstrip())
   ...
   1:2:3
   4:5:6
   7:8:9

Export a list of dictionaries
**********************************

.. code-block:: python

    >>> records = [
    ...     {"year": 1903, "country": "Germany", "speed": "206.7km/h"},
    ...     {"year": 1964, "country": "Japan", "speed": "210km/h"},
    ...     {"year": 2008, "country": "China", "speed": "350km/h"}
    ... ]
    >>> p.isave_as(records=records, dest_file_name='high_speed_rail.xls')

Export a dictionary of single key value pair
********************************************************************************

.. code-block:: python

    >>> henley_on_thames_facts = {
    ...     "area": "5.58 square meters",
    ...     "population": "11,619",
    ...     "civial parish": "Henley-on-Thames",
    ...     "latitude": "51.536",
    ...     "longitude": "-0.898"
    ... }
    >>> p.isave_as(adict=henley_on_thames_facts, dest_file_name='henley.xlsx')

Export a dictionary of single dimensonal array
********************************************************************************

.. code-block:: python

    >>> ccs_insights = {
    ...     "year": ["2017", "2018", "2019", "2020", "2021"],
    ...     "smart phones": [1.53, 1.64, 1.74, 1.82, 1.90],
    ...     "feature phones": [0.46, 0.38, 0.30, 0.23, 0.17]
    ... }
    >>> p.isave_as(adict=ccs_insights, dest_file_name='ccs.csv')
    >>> p.free_resources()

Export a dictionary of two dimensional array as a book
********************************************************************************

Suppose you want to save the below dictionary to an excel file :

.. code-block:: python

   >>> a_dictionary_of_two_dimensional_arrays = {
   ...      'Sheet 1':
   ...          [
   ...              [1.0, 2.0, 3.0],
   ...              [4.0, 5.0, 6.0],
   ...              [7.0, 8.0, 9.0]
   ...          ],
   ...      'Sheet 2':
   ...          [
   ...              ['X', 'Y', 'Z'],
   ...              [1.0, 2.0, 3.0],
   ...              [4.0, 5.0, 6.0]
   ...          ],
   ...      'Sheet 3':
   ...          [
   ...              ['O', 'P', 'Q'],
   ...              [3.0, 2.0, 1.0],
   ...              [4.0, 3.0, 2.0]
   ...          ]
   ...  }

Here is the code:

.. code-block:: python

   >>> p.isave_book_as(
   ...    bookdict=a_dictionary_of_two_dimensional_arrays,
   ...    dest_file_name="book.xls"
   ... )

If you want to preserve the order of sheets in your dictionary, you have to
pass on an ordered dictionary to the function itself. For example:

.. code-block:: python

   >>> from pyexcel._compact import OrderedDict
   >>> data = OrderedDict()
   >>> data.update({"Sheet 2": a_dictionary_of_two_dimensional_arrays['Sheet 2']})
   >>> data.update({"Sheet 1": a_dictionary_of_two_dimensional_arrays['Sheet 1']})
   >>> data.update({"Sheet 3": a_dictionary_of_two_dimensional_arrays['Sheet 3']})
   >>> p.isave_book_as(bookdict=data, dest_file_name="book.xls")
   >>> p.free_resources()

Let's verify its order:

.. code-block:: python

   >>> import json
   >>> book_dict = p.get_book_dict(file_name="book.xls")
   >>> for key, item in book_dict.items():
   ...     print(json.dumps({key: item}))
   {"Sheet 2": [["X", "Y", "Z"], [1, 2, 3], [4, 5, 6]]}
   {"Sheet 1": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}
   {"Sheet 3": [["O", "P", "Q"], [3, 2, 1], [4, 3, 2]]}

Please notice that "Sheet 2" is the first item in the *book_dict*, meaning the order of sheets are preserved.


File format transcoding on one line
-------------------------------------------

.. note::

   Please note that the following file transcoding could be with zero line. Please
   install pyexcel-cli and you will do the transcode in one command. No need to
   open your editor, save the problem, then python run.


The following code does a simple file format transcoding from xls to csv:

.. code-block:: python

   >>> import pyexcel
   >>> p.save_as(file_name="birth.xls", dest_file_name="birth.csv")

Again it is really simple. Let's verify what we have gotten:

.. code-block:: python

   >>> sheet = p.get_sheet(file_name="birth.csv")
   >>> sheet
   birth.csv:
   +-------+--------+----------+
   | name  | weight | birth    |
   +-------+--------+----------+
   | Adam  | 3.4    | 03/02/15 |
   +-------+--------+----------+
   | Smith | 4.2    | 12/11/14 |
   +-------+--------+----------+

.. note::

   Please note that csv(comma separate value) file is pure text file. Formula, charts, images and formatting in xls file will disappear no matter which transcoding tool you use. Hence, pyexcel is a quick alternative for this transcoding job.


Let use previous example and save it as xlsx instead

.. code-block:: python

   >>> import pyexcel
   >>> p.isave_as(file_name="birth.xls",
   ...            dest_file_name="birth.xlsx") # change the file extension

Again let's verify what we have gotten:

.. code-block:: python

   >>> sheet = p.get_sheet(file_name="birth.xlsx")
   >>> sheet
   pyexcel_sheet1:
   +-------+--------+----------+
   | name  | weight | birth    |
   +-------+--------+----------+
   | Adam  | 3.4    | 03/02/15 |
   +-------+--------+----------+
   | Smith | 4.2    | 12/11/14 |
   +-------+--------+----------+


Available Plugins
=================

.. _file-format-list:
.. _a-map-of-plugins-and-file-formats:

.. table:: A list of file formats supported by external plugins

   ======================== ======================= =================
   Package name              Supported file formats  Dependencies
   ======================== ======================= =================
   `pyexcel-io`_            csv, csvz [#f1]_, tsv,
                            tsvz [#f2]_
   `pyexcel-xls`_           xls, xlsx(read only),   `xlrd`_,
                            xlsm(read only)         `xlwt`_
   `pyexcel-xlsx`_          xlsx                    `openpyxl`_
   `pyexcel-ods3`_          ods                     `pyexcel-ezodf`_,
                                                    lxml
   `pyexcel-ods`_           ods                     `odfpy`_
   ======================== ======================= =================

.. table:: Dedicated file reader and writers

   ======================== ======================= =================
   Package name              Supported file formats  Dependencies
   ======================== ======================= =================
   `pyexcel-xlsxw`_         xlsx(write only)        `XlsxWriter`_
   `pyexcel-libxlsxw`_      xlsx(write only)        `libxlsxwriter`_
   `pyexcel-xlsxr`_         xlsx(read only)         lxml
   `pyexcel-xlsbr`_         xlsb(read only)         pyxlsb
   `pyexcel-odsr`_          read only for ods, fods lxml
   `pyexcel-odsw`_          write only for ods      loxun
   `pyexcel-htmlr`_         html(read only)         lxml,html5lib
   `pyexcel-pdfr`_          pdf(read only)          camelot
   ======================== ======================= =================


Plugin shopping guide
------------------------

Since 2020, all pyexcel-io plugins have dropped the support for python versions
which are lower than 3.6. If you want to use any of those Python versions, please use pyexcel-io
and its plugins versions that are lower than 0.6.0.


Except csv files, xls, xlsx and ods files are a zip of a folder containing a lot of
xml files

The dedicated readers for excel files can stream read


In order to manage the list of plugins installed, you need to use pip to add or remove
a plugin. When you use virtualenv, you can have different plugins per virtual
environment. In the situation where you have multiple plugins that does the same thing
in your environment, you need to tell pyexcel which plugin to use per function call.
For example, pyexcel-ods and pyexcel-odsr, and you want to get_array to use pyexcel-odsr.
You need to append get_array(..., library='pyexcel-odsr').



.. _pyexcel-io: https://github.com/pyexcel/pyexcel-io
.. _pyexcel-xls: https://github.com/pyexcel/pyexcel-xls
.. _pyexcel-xlsx: https://github.com/pyexcel/pyexcel-xlsx
.. _pyexcel-ods: https://github.com/pyexcel/pyexcel-ods
.. _pyexcel-ods3: https://github.com/pyexcel/pyexcel-ods3
.. _pyexcel-odsr: https://github.com/pyexcel/pyexcel-odsr
.. _pyexcel-odsw: https://github.com/pyexcel/pyexcel-odsw
.. _pyexcel-pdfr: https://github.com/pyexcel/pyexcel-pdfr

.. _pyexcel-xlsxw: https://github.com/pyexcel/pyexcel-xlsxw
.. _pyexcel-libxlsxw: https://github.com/pyexcel/pyexcel-libxlsxw
.. _pyexcel-xlsxr: https://github.com/pyexcel/pyexcel-xlsxr
.. _pyexcel-xlsbr: https://github.com/pyexcel/pyexcel-xlsbr
.. _pyexcel-htmlr: https://github.com/pyexcel/pyexcel-htmlr

.. _xlrd: https://github.com/python-excel/xlrd
.. _xlwt: https://github.com/python-excel/xlwt
.. _openpyxl: https://bitbucket.org/openpyxl/openpyxl
.. _XlsxWriter: https://github.com/jmcnamara/XlsxWriter
.. _pyexcel-ezodf: https://github.com/pyexcel/pyexcel-ezodf
.. _odfpy: https://github.com/eea/odfpy
.. _libxlsxwriter: http://libxlsxwriter.github.io/getting_started.html

.. table:: Other data renderers

   ======================== ======================= ================= ==================
   Package name              Supported file formats  Dependencies     Python versions
   ======================== ======================= ================= ==================
   `pyexcel-text`_          write only:rst,         `tabulate`_       2.6, 2.7, 3.3, 3.4
                            mediawiki, html,                          3.5, 3.6, pypy
                            latex, grid, pipe,
                            orgtbl, plain simple
                            read only: ndjson
                            r/w: json
   `pyexcel-handsontable`_  handsontable in html    `handsontable`_   same as above
   `pyexcel-pygal`_         svg chart               `pygal`_          2.7, 3.3, 3.4, 3.5
                                                                      3.6, pypy
   `pyexcel-sortable`_      sortable table in html  `csvtotable`_     same as above
   `pyexcel-gantt`_         gantt chart in html     `frappe-gantt`_   except pypy, same
                                                                      as above
   ======================== ======================= ================= ==================

.. _pyexcel-text: https://github.com/pyexcel/pyexcel-text
.. _tabulate: https://bitbucket.org/astanin/python-tabulate
.. _pyexcel-handsontable: https://github.com/pyexcel/pyexcel-handsontable
.. _handsontable: https://cdnjs.com/libraries/handsontable
.. _pyexcel-pygal: https://github.com/pyexcel/pyexcel-chart
.. _pygal: https://github.com/Kozea/pygal
.. _pyexcel-matplotlib: https://github.com/pyexcel/pyexcel-matplotlib
.. _matplotlib: https://matplotlib.org
.. _pyexcel-sortable: https://github.com/pyexcel/pyexcel-sortable
.. _csvtotable: https://github.com/vividvilla/csvtotable
.. _pyexcel-gantt: https://github.com/pyexcel/pyexcel-gantt
.. _frappe-gantt: https://github.com/frappe/gantt

.. rubric:: Footnotes

.. [#f1] zipped csv file
.. [#f2] zipped tsv file


Acknowledgement
===============

All great work have been done by odf, ezodf, xlrd, xlwt, tabulate and other
individual developers. This library unites only the data access code.




License
================================================================================

New BSD License



19 contributors
================================================================================

In alphabetical order:

* `Akshaya Kumar Sharma <https://github.com/akshayakrsh>`_
* `Andre Almar <https://github.com/andrealmar>`_
* `Arunkumar Rajendran <https://github.com/arunkumar-ra>`_
* `Ayan Banerjee <https://github.com/ayan-b>`_
* `Chris Hill-Scott <https://github.com/quis>`_
* `Craig Anderson <https://github.com/craiga>`_
* `Daryl Yu <https://github.com/darylyu>`_
* `J Harley <https://github.com/julzhk>`_
* `Joel Nothman <https://github.com/jnothman>`_
* `John Vandenberg <https://github.com/jayvdb>`_
* `Linghui Zeng <https://github.com/mathsyouth>`_
* `Nik Nyby <https://github.com/nikolas>`_
* `Rintze M. Zelle, PhD <https://github.com/rmzelle>`_
* `Simeon Visser <https://github.com/svisser>`_
* `Simon Allen <https://github.com/garfunkel>`_
* `simon klemenc <https://github.com/hiaselhans>`_
* `Tim Gates <https://github.com/timgates42>`_
* `Wesley A. Cheng <https://github.com/wesleyacheng>`_
* `William Jamir Silva <https://github.com/williamjamir>`_

Change log
================================================================================

0.7.0 - 12.2.2022
--------------------------------------------------------------------------------

**Fixed**

#. `#250 <https://github.com/pyexcel/pyexcel/issues/250>`_: RecursionError
   raised on deepcopy of a sheet

**Updated**

#. `#255 <https://github.com/pyexcel/pyexcel/issues/255>`_: pyexcel.get_array
   documentation page seems to be a copy of pyexcel.get_sheet

**Removed**

#. `#249 <https://github.com/pyexcel/pyexcel/issues/249>`_: drop the support for
   dummy import statements pyexcel.ext.*

0.6.7 - 12.09.2021
--------------------------------------------------------------------------------

**Updated**

#. `#243 <https://github.com/pyexcel/pyexcel/issues/243>`_: fix small typo.
#. add chardet as explicit dependency

0.6.6 - 14.11.2020
--------------------------------------------------------------------------------

**Updated**

#. `#233 <https://github.com/pyexcel/pyexcel/issues/233>`_: dynamically resize
   the table matrix on set_value. sheet['AA1'] = 'test' will work in this
   release.

0.6.5 - 8.10.2020
--------------------------------------------------------------------------------

**Updated**

#. update queryset source to work with pyexcel-io 0.6.0

0.6.4 - 18.08.2020
--------------------------------------------------------------------------------

**Updated**

#. `#219 <https://github.com/pyexcel/pyexcel/issues/219>`_: book created from
   dict no longer discards order.

0.6.3 - 01.08.2020
--------------------------------------------------------------------------------

**fixed**

#. `#214 <https://github.com/pyexcel/pyexcel/issues/214>`_: remove leading and
   trailing whitespace for column names

**removed**

#. python 2 compatibility have been permanently removed.

0.6.2 - 8.06.2020
--------------------------------------------------------------------------------

**fixed**

#. `#109 <https://github.com/pyexcel/pyexcel/issues/109>`_: Control the column
   order when write the data output

0.6.1 - 02.05.2020
--------------------------------------------------------------------------------

**fixed**

#. `#203 <https://github.com/pyexcel/pyexcel/issues/203>`_: texttable was
   dropped out in 0.6.0 as compulsary dependency. end user may experience it
   when a sheet/table is printed in a shell. otherwise, new user of pyexcel
   won't see it. As of release date, no issues were created

0.6.0 - 21.04.2020
--------------------------------------------------------------------------------

**updated**

#. `#199 <https://github.com/pyexcel/pyexcel/issues/199>`_: += in place; = +
   shall return new instance
#. `#195 <https://github.com/pyexcel/pyexcel/issues/195>`_: documentation
   update. however small is welcome

**removed**

#. Dropping the test support for python version lower than 3.6. v0.6.0 should
   work with python 2.7 but is not guaranteed to work. Please upgrade to python
   3.6+.

0.5.15 - 07.07.2019
--------------------------------------------------------------------------------

**updated**

#. `#185 <https://github.com/pyexcel/pyexcel/issues/185>`_: fix a bug with http
   data source. The real fix lies in pyexcel-io v0.5.19. this release just put
   the version requirement in.

0.5.14 - 12.06.2019
--------------------------------------------------------------------------------

**updated**

#. `#182 <https://github.com/pyexcel/pyexcel/issues/182>`_: support
   dest_force_file_type on save_as and save_book_as

0.5.13 - 12.03.2019
--------------------------------------------------------------------------------

**updated**

#. `#176 <https://github.com/pyexcel/pyexcel/issues/176>`_: get_sheet
   {IndexError}list index out of range // XLSX can't be opened

0.5.12 - 25.02.2019
--------------------------------------------------------------------------------

**updated**

#. `#174 <https://github.com/pyexcel/pyexcel/issues/174>`_: include examples in
   tarbar

0.5.11 - 22.02.2019
--------------------------------------------------------------------------------

**updated**

#. `#169 <https://github.com/pyexcel/pyexcel/issues/169>`_: remove
   pyexcel-handsontalbe in test
#. add tests, and docs folder in distribution

0.5.10 - 3.12.2018
--------------------------------------------------------------------------------

**updated**

#. `#157 <https://github.com/pyexcel/pyexcel/issues/157>`_: Please use
   scan_plugins_regex, which lml 0.7 complains about
#. updated dependency on pyexcel-io to 0.5.11

0.5.9.1 - 30.08.2018
--------------------------------------------------------------------------------

**updated**

#. to require pyexcel-io 0.5.9.1 and use lml at least version 0.0.2

0.5.9 - 30.08.2018
--------------------------------------------------------------------------------

**added**

#. support __len__. len(book) returns the number of sheets and len(sheet)
   returns the number of rows
#. `#144 <https://github.com/pyexcel/pyexcel/issues/144>`_: memory-efficient way
   to read sheet names.
#. `#148 <https://github.com/pyexcel/pyexcel/issues/148>`_: force_file_type is
   introduced. When reading a file on a disk, this parameter allows you to
   choose a reader. i.e. csv reader for a text file. xlsx reader for a xlsx file
   but with .blob file suffix.
#. finally, pyexcel got import pyexcel.__version__

**updated**

#. Sheet.to_records() returns a generator now, saving memory
#. `#115 <https://github.com/pyexcel/pyexcel/issues/115>`_, Fix set membership
   test to run faster in python2
#. `#140 <https://github.com/pyexcel/pyexcel/issues/140>`_, Direct writes to
   cells yield weird results

0.5.8 - 26.03.2018
--------------------------------------------------------------------------------

**added**

#. `#125 <https://github.com/pyexcel/pyexcel/issues/125>`_, sort book sheets

**updated**

#. `#126 <https://github.com/pyexcel/pyexcel/issues/126>`_, dest_sheet_name in
   save_as will set the sheet name in the output
#. `#115 <https://github.com/pyexcel/pyexcel/issues/115>`_, Fix set membership
   test to run faster in python2

0.5.7 - 11.01.2018
--------------------------------------------------------------------------------

**added**

#. `pyexcel-io#46 <https://github.com/pyexcel/pyexcel-io/issues/46>`_, expose
   `bulk_save` to developer.

0.5.6 - 23.10.2017
--------------------------------------------------------------------------------

**removed**

#. `#105 <https://github.com/pyexcel/pyexcel/issues/105>`_, remove gease from
   setup_requires, introduced by 0.5.5.
#. removed testing against python 2.6
#. `#103 <https://github.com/pyexcel/pyexcel/issues/103>`_, include LICENSE file
   in MANIFEST.in, meaning LICENSE file will appear in the released tar ball.

0.5.5 - 20.10.2017
--------------------------------------------------------------------------------

**removed**

#. `#105 <https://github.com/pyexcel/pyexcel/issues/105>`_, remove gease from
   setup_requires, introduced by 0.5.5.
#. removed testing against python 2.6
#. `#103 <https://github.com/pyexcel/pyexcel/issues/103>`_, include LICENSE file
   in MANIFEST.in, meaning LICENSE file will appear in the released tar ball.

0.5.4 - 27.09.2017
--------------------------------------------------------------------------------

**fixed**

#. `#100 <https://github.com/pyexcel/pyexcel/issues/100>`_, Sheet.to_dict() gets
   out of range error because there is only one row.

**updated**

#. Updated the baseline of pyexcel-io to 0.5.1.

0.5.3 - 01-08-2017
--------------------------------------------------------------------------------

**added**

#. `#95 <https://github.com/pyexcel/pyexcel/issues/95>`_, respect the order of
   records in iget_records, isave_as and save_as.
#. `#97 <https://github.com/pyexcel/pyexcel/issues/97>`_, new feature to allow
   intuitive initialization of pyexcel.Book.

0.5.2 - 26-07-2017
--------------------------------------------------------------------------------

**Updated**

#. embeded the enabler for pyexcel-htmlr. http source does not support text/html
   as mime type.

0.5.1 - 12.06.2017
--------------------------------------------------------------------------------

**Updated**

#. support saving SheetStream and BookStream to database targets. This is needed
   for pyexcel-webio and its downstream projects.

0.5.0 - 19.06.2017
--------------------------------------------------------------------------------

**Added**

#. Sheet.top() and Sheet.top_left() for data browsing
#. add html as default rich display in Jupyter notebook when pyexcel-text and
   pyexcel-chart is installed
#. add svg as default rich display in Jupyter notebook when pyexcel-chart and
   one of its implementation plugin(pyexcel-pygal, etc.) are is installed
#. new dictionary source supported: a dictionary of key value pair could be read
   into a sheet.
#. added dynamic external plugin loading. meaning if a pyexcel plugin is
   installed, it will be loaded implicitly. And this change would remove
   unnecessary info log for those who do not use pyexcel-text and pyexcel-gal
#. save_book_as before 0.5.0 becomes isave_book_as and save_book_as in 0.5.0
   convert BookStream to Book before saving.
#. `#83 <https://github.com/pyexcel/pyexcel/issues/83>`_, file closing mechanism
   is enfored. free_resource is added and it should be called when iget_array,
   iget_records, isave_as and/or isave_book_as are used.

**Updated**

#. array is passed to pyexcel.Sheet as reference. it means your array data will
   be modified.

**Removed**

#. pyexcel.Writer and pyexcel.BookWriter were removed
#. pyexcel.load_book_from_sql and pyexcel.load_from_sql were removed
#. pyexcel.deprecated.load_from_query_sets,
   pyexcel.deprecated.load_book_from_django_models and
   pyexcel.deprecated.load_from_django_model were removed
#. Removed plugin loading code and lml is used instead

0.4.5 - 17.03.2017
--------------------------------------------------------------------------------

**Updated**

#. `#80 <https://github.com/pyexcel/pyexcel/issues/80>`_: remove pyexcel-chart
   import from v0.4.x

0.4.4 - 06.02.2017
--------------------------------------------------------------------------------

**Updated**

#. `#68 <https://github.com/pyexcel/pyexcel/issues/68>`_: regression
   save_to_memory() should have returned a stream instance which has been reset
   to zero if possible. The exception is sys.stdout, which cannot be reset.
#. `#74 <https://github.com/pyexcel/pyexcel/issues/74>`_: Not able to handle
   decimal.Decimal

**Removed**

#. remove get_{{file_type}}_stream functions from pyexcel.Sheet and pyexcel.Book
   introduced since 0.4.3.

0.4.3 - 26.01.2017
--------------------------------------------------------------------------------

**Added**

#. '.stream' attribute are attached to `~pyexcel.Sheet` and `~pyexcel.Book` to
   get direct access the underneath stream in responding to file type
   attributes, such as sheet.xls. it helps provide a custom stream to external
   world, for example, Sheet.stream.csv gives a text stream that contains csv
   formatted data. Book.stream.xls returns a xls format data in a byte stream.

**Updated**

#. Better error reporting when an unknown parameters or unsupported file types
   were given to the signature functions.

0.4.2 - 17.01.2017
--------------------------------------------------------------------------------

**Updated**

#. Raise exception if the incoming sheet does not have column names. In other
   words, only sheet with column names could be saved to database. sheet with
   row names cannot be saved. The alternative is to transpose the sheet, then
   name_columns_by_row and then save.
#. fix iget_records where a non-uniform content should be given, e.g. [["x",
   "y"], [1, 2], [3]], some record would become non-uniform, e.g. key 'y' would
   be missing from the second record.
#. `skip_empty_rows` is applicable when saving a python data structure to
   another data source. For example, if your array contains a row which is
   consisted of empty string, such as ['', '', '' ... ''], please specify
   `skip_empty_rows=False` in order to preserve it. This becomes subtle when you
   try save a python dictionary where empty rows is not easy to be spotted.
#. `#69 <https://github.com/pyexcel/pyexcel/issues/69>`_: better documentation
   for save_book_as.

0.4.1 - 23.12.2016
--------------------------------------------------------------------------------

**Updated**

#. `#68 <https://github.com/pyexcel/pyexcel/issues/68>`_: regression
   save_to_memory() should have returned a stream instance.

0.4.0 - 22.12.2016
--------------------------------------------------------------------------------

**Added**

#. `Flask-Excel#19 <https://github.com/pyexcel/Flask-Excel/issues/19>`_ allow
   sheet_name parameter
#. `pyexcel-xls#11 <https://github.com/pyexcel/pyexcel-xls/issues/11>`_
   case-insensitive for file_type. `xls` and `XLS` are treated in the same way

**Updated**

#. `#66 <https://github.com/pyexcel/pyexcel/issues/66>`_: `export_columns` is
   ignored
#. Update dependency on pyexcel-io v0.3.0

0.3.3 - 07.11.2016
--------------------------------------------------------------------------------

**Updated**

#. `#63 <https://github.com/pyexcel/pyexcel/issues/63>`_: cannot display empty
   sheet(hence book with empty sheet) as texttable

0.3.2 - 02.11.2016
--------------------------------------------------------------------------------

**Updated**

#. `#62 <https://github.com/pyexcel/pyexcel/issues/62>`_: optional module import
   error become visible.

0.3.0 - 28.10.2016
--------------------------------------------------------------------------------

**Added:**

#. file type setters for Sheet and Book, and its documentation
#. `iget_records` returns a generator for a list of records and should have
   better memory performance, especially dealing with large csv files.
#. `iget_array` returns a generator for a list of two dimensional array and
   should have better memory performance, especially dealing with large csv
   files.
#. Enable pagination support, and custom row renderer via pyexcel-io v0.2.3

**Updated**

#. Take `isave_as` out from `save_as`. Hence two functions are there for save a
   sheet as
#. `#60 <https://github.com/pyexcel/pyexcel/issues/60>`_: encode 'utf-8' if the
   console is of ascii encoding.
#. `#59 <https://github.com/pyexcel/pyexcel/issues/59>`_: custom row renderer
#. `#56 <https://github.com/pyexcel/pyexcel/issues/56>`_: set cell value does
   not work
#. pyexcel.transpose becomes `pyexcel.sheets.transpose`
#. iterator functions of `pyexcel.Sheet` were converted to generator functions

   * `pyexcel.Sheet.enumerate()`
   * `pyexcel.Sheet.reverse()`
   * `pyexcel.Sheet.vertical()`
   * `pyexcel.Sheet.rvertical()`
   * `pyexcel.Sheet.rows()`
   * `pyexcel.Sheet.rrows()`
   * `pyexcel.Sheet.columns()`
   * `pyexcel.Sheet.rcolumns()`
   * `pyexcel.Sheet.named_rows()`
   * `pyexcel.Sheet.named_columns()`

#. `~pyexcel.Sheet.save_to_memory` and `~pyexcel.Book.save_to_memory` return the
   actual content. No longer they will return a io object hence you cannot call
   getvalue() on them.

**Removed:**

#. `content` and `out_file` as function parameters to the signature functions
   are no longer supported.
#. SourceFactory and RendererFactory are removed
#. The following methods are removed

   * `pyexcel.to_array`
   * `pyexcel.to_dict`
   * `pyexcel.utils.to_one_dimensional_array`
   * `pyexcel.dict_to_array`
   * `pyexcel.from_records`
   * `pyexcel.to_records`

#. `pyexcel.Sheet.filter` has been re-implemented and all filters were removed:

   * `pyexcel.filters.ColumnIndexFilter`
   * `pyexcel.filters.ColumnFilter`
   * `pyexcel.filters.RowFilter`
   * `pyexcel.filters.EvenColumnFilter`
   * `pyexcel.filters.OddColumnFilter`
   * `pyexcel.filters.EvenRowFilter`
   * `pyexcel.filters.OddRowFilter`
   * `pyexcel.filters.RowIndexFilter`
   * `pyexcel.filters.SingleColumnFilter`
   * `pyexcel.filters.RowValueFilter`
   * `pyexcel.filters.NamedRowValueFilter`
   * `pyexcel.filters.ColumnValueFilter`
   * `pyexcel.filters.NamedColumnValueFilter`
   * `pyexcel.filters.SingleRowFilter`

#. the following functions have been removed

   * `add_formatter`
   * `remove_formatter`
   * `clear_formatters`
   * `freeze_formatters`
   * `add_filter`
   * `remove_filter`
   * `clear_filters`
   * `freeze_formatters`

#. `pyexcel.Sheet.filter` has been re-implemented and all filters were removed:

   * pyexcel.formatters.SheetFormatter


0.2.5 - 31.08.2016
--------------------------------------------------------------------------------

**Updated:**

#. `#58 <https://github.com/pyexcel/pyexcel/issues/58>`_: texttable should have
   been made as compulsory requirement

0.2.4 - 14.07.2016
--------------------------------------------------------------------------------

**Updated:**

#. For python 2, writing to sys.stdout by pyexcel-cli raise IOError.

0.2.3 - 11.07.2016
--------------------------------------------------------------------------------

**Updated:**

#. For python 3, do not seek 0 when saving to memory if sys.stdout is passed on.
   Hence, adding support for sys.stdin and sys.stdout.

0.2.2 - 01.06.2016
--------------------------------------------------------------------------------

**Updated:**

#. Explicit imports, no longer needed
#. Depends on latest setuptools 18.0.1
#. NotImplementedError will be raised if parameters to core functions are not
   supported, e.g. get_sheet(cannot_find_me_option="will be thrown out as
   NotImplementedError")

0.2.1 - 23.04.2016
--------------------------------------------------------------------------------

**Added:**

#. add pyexcel-text file types as attributes of pyexcel.Sheet and pyexcel.Book,
   related to `#31 <https://github.com/pyexcel/pyexcel/issues/31>`__
#. auto import pyexcel-text if it is pip installed

**Updated:**

#. code refactoring done for easy addition of sources.
#. bug fix `#29 <https://github.com/pyexcel/pyexcel/issues/29>`__, Even if the
   format is a string it is displayed as a float
#. pyexcel-text is no longer a plugin to pyexcel-io but to pyexcel.sources, see
   `pyexcel-text#22 <https://github.com/pyexcel/pyexcel-text/issues/22>`__

**Removed:**

#. pyexcel.presentation is removed. No longer the internal decorate @outsource
   is used. related to `#31 <https://github.com/pyexcel/pyexcel/issues/31>`_

0.2.0 - 17.01.2016
--------------------------------------------------------------------------------

**Updated**

#. adopt pyexcel-io yield key word to return generator as content
#. pyexcel.save_as and pyexcel.save_book_as get performance improvements

0.1.7 - 03.07.2015
--------------------------------------------------------------------------------

**Added**

#. Support pyramid-excel which does the database commit on its own.

0.1.6 - 13.06.2015
--------------------------------------------------------------------------------

**Added**

#. get excel data from a http url

0.0.13 - 07.02.2015
--------------------------------------------------------------------------------

**Added**

#. Support django
#. texttable as default renderer

0.0.12 - 25.01.2015
--------------------------------------------------------------------------------

**Added**

#. Added sqlalchemy support

0.0.10 - 15.12.2015
--------------------------------------------------------------------------------

**Added**

#. added csvz and tsvz format

0.0.4 - 12.10.2014
--------------------------------------------------------------------------------

**Updated**

#. Support python 3

0.0.1 - 14.09.2014
--------------------------------------------------------------------------------

**Features:**

#. read and write csv, ods, xls, xlsx and xlsm files(which are referred later as
   excel files)
#. various iterators for the reader
#. row and column filters for the reader
#. utilities to get array and dictionary out from excel files.
#. cookbok receipes for some common and simple usage of this library.



